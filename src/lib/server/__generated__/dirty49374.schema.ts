
import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';

// this file is generated by code generator

// scalar types -----------------------------
export type Scalars = {
  Boolean: any;
  ID: string;
  Int: number;
  String: string;
  Timestamp: Date;
}


// union types ------------------------------


// enum types -------------------------------
export enum ContentType {
  Markdown = 'Markdown',
  Plaintext = 'PlainText',
};

export enum Role {
  Admin = 'Admin',
  Member = 'Member',
};


// object types -----------------------------
export interface Category  {
  __typename?: 'Category';
  id: string;
  name: string;
}

export interface CreatePostOutput  {
  __typename?: 'CreatePostOutput';
  post?: Post | null;
}

export interface DeletePostOutput  {
  __typename?: 'DeletePostOutput';
  success: any;
}

export interface LoginOutput  {
  __typename?: 'LoginOutput';
  me?: Me | null;
}

export interface Me  {
  __typename?: 'Me';
  id: string;
  userId?: string | null;
  name?: string | null;
  email?: string | null;
  avatar: string;
  role?: Role | null;
  loggedIn: any;
}

export interface Mutation  {
  __typename?: 'Mutation';
  createPost: CreatePostOutput;
  deletePost: DeletePostOutput;
  updatePost: UpdatePostOutput;
  updateServiceConfig: UpdateConfigOutput;
}

export interface PageInfo  {
  __typename?: 'PageInfo';
  startCursor?: string | null;
  endCursor?: string | null;
  hasNextPage: any;
  hasPreviousPage: any;
}

export interface Post  {
  __typename?: 'Post';
  title: string;
  type: ContentType;
  category: string;
  content: string;
  postedAt: Date;
}

export interface PostConnection  {
  __typename?: 'PostConnection';
  edges: PostEdge[];
  nodes: Post[];
  pageInfo: PageInfo;
}

export interface PostEdge  {
  __typename?: 'PostEdge';
  cursor: string;
  node: Post;
}

export interface Query  {
  __typename?: 'Query';
  health: string;
  me: Me;
  user?: User | null;
  post?: Post | null;
  posts: PostConnection;
  node?: Node | null;
  serviceConfig: ServiceConfig;
}

export interface ServiceConfig  {
  __typename?: 'ServiceConfig';
  categories: Category[];
}

export interface UpdateConfigOutput  {
  __typename?: 'UpdateConfigOutput';
  serviceConfig: ServiceConfig;
}

export interface UpdatePostOutput  {
  __typename?: 'UpdatePostOutput';
  post?: Post | null;
}

export interface User  {
  __typename?: 'User';
  name: string;
  email: string;
  role: Role;
}


// interface types --------------------------
export type Node =  {
  __typename?: 'Node';
  id: string;
}


// input types ------------------------------
export type CategoryInput = {
  id: string;
  name: string;
}

export type CreatePostInput = {
  title: string;
  category: string;
  content: string;
  type: ContentType;
}

export type DeletePostInput = {
  id: string;
}

export type LoginInput = {
  email: string;
  password: string;
}

export type SigninInput = {
  email: string;
  password: string;
}

export type UpdateCategoryConfigInput = {
  categories: CategoryInput[];
}

export type UpdatePostModifyInput = {
  id: string;
  title: string;
  category: string;
  content: string;
}


// resolver types ---------------------------


export type CategoryResolver<TContext = any> = {
  

  __isTypeOf?: (obj: Category, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};



export type CreatePostOutputResolver<TContext = any> = {
  

  __isTypeOf?: (obj: CreatePostOutput, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};



export type DeletePostOutputResolver<TContext = any> = {
  

  __isTypeOf?: (obj: DeletePostOutput, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};



export type LoginOutputResolver<TContext = any> = {
  

  __isTypeOf?: (obj: LoginOutput, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};



export type MeResolver<TContext = any> = {
  

  __isTypeOf?: (obj: Me, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};

export type MutationCreatePostArgs = {
  input: CreatePostInput;
};
export type MutationDeletePostArgs = {
  input: DeletePostInput;
};
export type MutationUpdatePostArgs = {
  modify?: UpdatePostModifyInput | null;
};
export type MutationUpdateServiceConfigArgs = {
  category?: UpdateCategoryConfigInput | null;
};

export type MutationResolver<TContext = any> = {
  createPost: (parent: Mutation, args: MutationCreatePostArgs, context: TContext, info: GraphQLResolveInfo) => Promise<CreatePostOutput> | CreatePostOutput;
  deletePost: (parent: Mutation, args: MutationDeletePostArgs, context: TContext, info: GraphQLResolveInfo) => Promise<DeletePostOutput> | DeletePostOutput;
  updatePost: (parent: Mutation, args: MutationUpdatePostArgs, context: TContext, info: GraphQLResolveInfo) => Promise<UpdatePostOutput> | UpdatePostOutput;
  updateServiceConfig: (parent: Mutation, args: MutationUpdateServiceConfigArgs, context: TContext, info: GraphQLResolveInfo) => Promise<UpdateConfigOutput> | UpdateConfigOutput;

  __isTypeOf?: (obj: Mutation, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};



export type PageInfoResolver<TContext = any> = {
  

  __isTypeOf?: (obj: PageInfo, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};




export type PostResolver<TContext = any> = {
  id: (parent: Post, args: {}, context: TContext, info: GraphQLResolveInfo) => Promise<string> | string;
  author: (parent: Post, args: {}, context: TContext, info: GraphQLResolveInfo) => Promise<User | null> | User | null;

  __isTypeOf?: (obj: Post, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};



export type PostConnectionResolver<TContext = any> = {
  

  __isTypeOf?: (obj: PostConnection, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};



export type PostEdgeResolver<TContext = any> = {
  

  __isTypeOf?: (obj: PostEdge, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};



export type QueryUserArgs = {
  id: string;
};
export type QueryPostArgs = {
  id: string;
};
export type QueryPostsArgs = {
  first?: number | null
  last?: number | null
  after?: string | null
  before?: string | null
  category?: string | null;
};
export type QueryNodeArgs = {
  id: string;
};


export type QueryResolver<TContext = any> = {
  health: (parent: Query, args: {}, context: TContext, info: GraphQLResolveInfo) => Promise<string> | string;
  me: (parent: Query, args: {}, context: TContext, info: GraphQLResolveInfo) => Promise<Me> | Me;
  user: (parent: Query, args: QueryUserArgs, context: TContext, info: GraphQLResolveInfo) => Promise<User | null> | User | null;
  post: (parent: Query, args: QueryPostArgs, context: TContext, info: GraphQLResolveInfo) => Promise<Post | null> | Post | null;
  posts: (parent: Query, args: QueryPostsArgs, context: TContext, info: GraphQLResolveInfo) => Promise<PostConnection> | PostConnection;
  node: (parent: Query, args: QueryNodeArgs, context: TContext, info: GraphQLResolveInfo) => Promise<Node | null> | Node | null;
  serviceConfig: (parent: Query, args: {}, context: TContext, info: GraphQLResolveInfo) => Promise<ServiceConfig> | ServiceConfig;

  __isTypeOf?: (obj: Query, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};



export type ServiceConfigResolver<TContext = any> = {
  id: (parent: ServiceConfig, args: {}, context: TContext, info: GraphQLResolveInfo) => Promise<string> | string;

  __isTypeOf?: (obj: ServiceConfig, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};



export type UpdateConfigOutputResolver<TContext = any> = {
  

  __isTypeOf?: (obj: UpdateConfigOutput, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};



export type UpdatePostOutputResolver<TContext = any> = {
  

  __isTypeOf?: (obj: UpdatePostOutput, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};




export type UserResolver<TContext = any> = {
  id: (parent: User, args: {}, context: TContext, info: GraphQLResolveInfo) => Promise<string> | string;
  avatar: (parent: User, args: {}, context: TContext, info: GraphQLResolveInfo) => Promise<string> | string;

  __isTypeOf?: (obj: User, context: TContext, info: GraphQLResolveInfo) => Promise<boolean> | boolean;
};


// all resolvers ----------------------------
export type Resolvers<TContext = any> = {
  Category?: CategoryResolver<TContext>;
  CreatePostOutput?: CreatePostOutputResolver<TContext>;
  DeletePostOutput?: DeletePostOutputResolver<TContext>;
  LoginOutput?: LoginOutputResolver<TContext>;
  Me?: MeResolver<TContext>;
  Mutation: MutationResolver<TContext>;
  PageInfo?: PageInfoResolver<TContext>;
  Post: PostResolver<TContext>;
  PostConnection?: PostConnectionResolver<TContext>;
  PostEdge?: PostEdgeResolver<TContext>;
  Query: QueryResolver<TContext>;
  ServiceConfig: ServiceConfigResolver<TContext>;
  UpdateConfigOutput?: UpdateConfigOutputResolver<TContext>;
  UpdatePostOutput?: UpdatePostOutputResolver<TContext>;
  User: UserResolver<TContext>;
};
